# -*- coding: utf-8 -*-
"""Anomaly Detection in Exoplanet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D81h7tCzSbJ2eFVM16khhjmHIlDli9C1

# Unsupervised Learning Framework for Anomaly Detection in Exoplanet Data
"""

# Libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN
from sklearn.ensemble import IsolationForest
from sklearn.manifold import TSNE
import matplotlib.pyplot as plt
import seaborn as sns

"""1. Loading the Dataset"""

# CSV structure: ['planet_radius', 'orbital_period', 'stellar_temp', 'flux_received', 'eccentricity']
data = pd.read_csv("exoplanet_features.csv")

"""2. Data Preprocessing"""

features = data.select_dtypes(include=[np.number]).dropna()
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

"""3. Dimensionality Reduction"""

pca = PCA(n_components=3)
pca_features = pca.fit_transform(scaled_features)

"""4. Anomaly Detection with Isolation Forest"""

iso_forest = IsolationForest(contamination=0.05, random_state=42)
data['anomaly_score'] = iso_forest.fit_predict(pca_features)
data['anomaly'] = data['anomaly_score'] == -1

"""5. Clustering with DBSCAN for Group Anomalies"""

db = DBSCAN(eps=0.5, min_samples=5)
data['cluster'] = db.fit_predict(pca_features)

"""6. t-SNE for Visualisation"""

# tsne = TSNE(n_components=2, perplexity=30, n_iter=3000, random_state=42)
# tsne = TSNE(n_components=2, perplexity=3, n_iter=3000, random_state=42)
tsne = TSNE(n_components=2, perplexity=3, max_iter=3000, random_state=42)
tsne_results = tsne.fit_transform(pca_features)
data['tsne-1'] = tsne_results[:, 0]
data['tsne-2'] = tsne_results[:, 1]

"""7. Visualisation"""

plt.figure(figsize=(10, 8))
sns.scatterplot(x='tsne-1', y='tsne-2', hue='anomaly', data=data, palette={True: 'red', False: 'blue'}, alpha=0.7)
plt.title("Exoplanet Anomaly Detection via Unsupervised Learning")
plt.legend(title='Anomaly')
plt.show()

"""8. Saving Anomalies for further use"""

anomalies = data[data['anomaly'] == True]
anomalies.to_csv("flagged_exoplanet_anomalies.csv", index=False)

"""3D Interactive Visual of Exoplanet"""

import pandas as pd
import plotly.express as px

# Loading the processed dataset
df = pd.read_csv("flagged_exoplanet_anomalies.csv")

required_cols = ['planet_radius', 'orbital_period', 'stellar_temp', 'anomaly']
if not all(col in df.columns for col in required_cols):
    raise ValueError("Dataset must contain planet_radius, orbital_period, stellar_temp, and anomaly columns.")

# Plotly 3D scatter plot
fig = px.scatter_3d(
    df,
    x='planet_radius',
    y='orbital_period',
    z='stellar_temp',
    color='anomaly',
    symbol='anomaly',
    title='3D Interactive Visualisation of Exoplanets',
    labels={'planet_radius': 'Radius (RâŠ•)', 'orbital_period': 'Orbital Period (days)', 'stellar_temp': 'Stellar Temp (K)'},
     # Show all info when hovered
    hover_data=df.columns
)

fig.update_traces(marker=dict(size=6))
fig.show()

"""Pair Grid"""

sns.pairplot(data, hue="anomaly", vars=['planet_radius', 'orbital_period', 'stellar_temp'])

"""The Feature Correlation Matrix"""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title("Feature - Correlation Matrix")

"""Box Plot"""

sns.boxplot(x='anomaly', y='planet_radius', data=data)

sns.kdeplot(data=data, x="orbital_period", hue="anomaly", fill=True)

sns.histplot(data['anomaly_score'], bins=20, kde=True)

"""# Using Kepler Dataset"""

kepler_data = pd.read_csv("kepler_dataset.csv")

kepler_data.head(), kepler_data.columns

"""1. Selecting features and scaling them"""

features = kepler_data.drop(columns=['koi_disposition'])
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

"""2. Applying PCA for dimensionality reduction"""

pca = PCA(n_components=3)
pca_features = pca.fit_transform(scaled_features)

""" 3. Applying Isolation Forest for anomaly detection"""

iso_forest = IsolationForest(contamination=0.05, random_state=42)
kepler_data['anomaly_score'] = iso_forest.fit_predict(pca_features)
kepler_data['anomaly'] = kepler_data['anomaly_score'] == -1

"""4. Applying t-SNE for visualisation"""

tsne = TSNE(n_components=2, perplexity=3, random_state=42, max_iter=3000)
tsne_results = tsne.fit_transform(pca_features)
kepler_data['tsne-1'] = tsne_results[:, 0]
kepler_data['tsne-2'] = tsne_results[:, 1]

"""5. Plotting the results"""

plt.figure(figsize=(10, 7))
sns.scatterplot(x='tsne-1', y='tsne-2', hue='anomaly', data=kepler_data, palette={True: 'red', False: 'blue'})
plt.title("Anomaly Detection in Kepler Dataset using Isolation Forest + t-SNE")
plt.legend(title="Anomaly")
plt.tight_layout()
plt.show()