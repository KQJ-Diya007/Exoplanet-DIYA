# -*- coding: utf-8 -*-
"""Exoplanet_ML-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11eci1Wx2FiVvCaOs-OiJCg46lw21TQyh
"""

!pip install scikit-learn pandas joblib

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error
import joblib

# Simulate sample dataset
np.random.seed(42)
n = 500

X = pd.DataFrame({
    'orbital_period': np.random.uniform(10, 1000, n),
    'planet_radius': np.random.uniform(0.3, 15, n),
    'stellar_radius': np.random.uniform(0.1, 2.0, n),
    'transit_depth': np.random.uniform(0.01, 0.2, n),
    'eq_temperature': np.random.uniform(100, 500, n),
    'stellar_temperature': np.random.uniform(3000, 7000, n),
    'snr': np.random.uniform(1, 100, n),
    'atmospheric_comp': np.random.uniform(0, 1, n),
    'uv_flux': np.random.uniform(0, 1, n),
    'eccentricity': np.random.uniform(0, 1, n),
    'distance_star': np.random.uniform(0.1, 100, n),
    'pressure': np.random.uniform(0.1, 10, n),
    'water_presence': np.random.randint(0, 2, n),
    'gravity': np.random.uniform(3, 25, n)
})

# Synthetic targets
# y_detected = (X['planet_radius'] > 1.0) & (X['eq_temperature'] < 400)
y_detected = (X['planet_radius'] >= 1.0) & (X['eq_temperature'] < 400)
y_biosignature = (X['water_presence'] == 1) & (X['atmospheric_comp'] > 0.5)
y_habitability = (X['eq_temperature'] - 288)**2 / 10000 + 1 - X['atmospheric_comp']

# Normalise between 0-1
y_habitability = 1.0 / (1 + y_habitability)

# Model 1: Exoplanet Detection
det_model = RandomForestClassifier(n_estimators=100, random_state=42)
det_model.fit(X, y_detected)
joblib.dump(det_model, 'detector_model_v2.pkl')

# Model 2: Biosignature Prediction
bio_model = GradientBoostingClassifier(n_estimators=100, random_state=42)
bio_model.fit(X, y_biosignature)
joblib.dump(bio_model, 'biosignature_model_v2.pkl')

# Model 3: Habitability Score
hab_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
hab_model.fit(X, y_habitability)
joblib.dump(hab_model, 'habitability_model_v2.pkl')

det_model.fit(X, y_detected)

print("All models trained and saved")

# Load models
det_model = joblib.load('detector_model_v2.pkl')
bio_model = joblib.load('biosignature_model_v2.pkl')
hab_model = joblib.load('habitability_model_v2.pkl')

# Test input
X_test = pd.DataFrame({
    'orbital_period': [365],
    'planet_radius': [1.0],
    'stellar_radius': [1.0],
    'transit_depth': [0.15],
    'eq_temperature': [288],
    'stellar_temperature': [5500],
    'snr': [50],
    'atmospheric_comp': [0.8],
    'uv_flux': [0.3],
    'eccentricity': [0.05],
    'distance_star': [1.0],
    'pressure': [1.0],
    'water_presence': [1],
    'gravity': [9.8]
})

det_model.fit(X, y_detected)

detected = det_model.predict(X_test)[0]
biosignature = bio_model.predict(X_test)[0]
habitability = hab_model.predict(X_test)[0]

print(f"Exoplanet Detected: {bool(detected)}")
print(f"Biosignature Likely: {bool(biosignature)}")
print(f"Habitability Score: {habitability:.3f}")